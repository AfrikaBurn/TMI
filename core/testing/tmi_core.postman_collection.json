{
	"info": {
		"_postman_id": "9ac72324-54cb-4435-8218-daa4801ea075",
		"name": "tmi core",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"description": "Setup tasks required to run test requests.",
			"item": [
				{
					"name": "Logout - add tests",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {},
						"url": {
							"raw": "localhost:3000/user/logout",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"logout"
							]
						},
						"description": "Log the user out of the current session."
					},
					"response": []
				},
				{
					"name": "Create System Users - add tests",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{\n\t\t\"username\": \"Anonymous\",\n        \"email\": {\n        \t\"value\": \"Anonymous@Anonymous.com\",\n        \t\"privacy\": \"private\"\n        },\n        \"password\": \"Anonymous0\"\n\t},\n    {\n        \"username\": \"Administrator\",\n        \"email\": {\n        \t\"value\": \"Administrator@Administrator.com\",\n        \t\"privacy\": \"private\"\n        },\n        \"password\": \"Administrator0\"\n    },\n    {\n        \"username\": \"Authenticated\",\n        \"email\": {\n        \t\"value\": \"Authenticated@Authenticated.com\",\n        \t\"privacy\": \"private\"\n        },\n        \"password\": \"Authenticated0\"\n    }\n]"
						},
						"url": {
							"raw": "localhost:3000/user",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user"
							]
						},
						"description": "Create a user"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b95d2658-82c5-451f-9f21-ffdcb9a2f514",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5edc648f-693b-41dc-94be-444b4e7e6923",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "As anonymous",
			"description": "Requests bu unauthenticated users.",
			"item": [
				{
					"name": "User",
					"description": "Requests to the user service.",
					"item": [
						{
							"name": "Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2853fc25-9ceb-45c4-847c-5e57771b0c3b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response has body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Response is JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Error object is undefined\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(undefined);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;schema"
									}
								],
								"body": {},
								"url": {
									"raw": "localhost:3000/user",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									]
								},
								"description": "Retrieves the User schema"
							},
							"response": []
						},
						{
							"name": "List - add more tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d71ebff-3411-41c2-acce-bf557bdecd3f",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response has body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Response is JSON\", function () {",
											"    pm.response.to.be.json;",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "localhost:3000/user",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									]
								},
								"description": "Retrieves a list of users"
							},
							"response": []
						},
						{
							"name": "Find - add more tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "635dab22-d2a5-4147-ae04-41bd49a0cd93",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response has body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Response is JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "localhost:3000/user?username=Test",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "username",
											"value": "Test"
										}
									]
								},
								"description": "Retrieves a list of users that satisfy a set of criteria"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebbfd914-5662-408b-bb90-a64c2c593398",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response has body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Response is JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Error object is undefined\", function () {",
											"    pm.expect(jsonData.error).to.eql(undefined);",
											"});",
											"",
											"pm.test(\"Response is an array of 1\", function () {",
											"    pm.expect(jsonData.entities.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Id property set\", function () {",
											"    pm.expect(jsonData.entities[0].id).to.not.eql(undefined);",
											"});",
											"",
											"pm.test(\"Username property set\", function () {",
											"    pm.expect(jsonData.entities[0].username).to.eql(\"Tester\");",
											"});",
											"",
											"pm.test(\"Email property set\", function () {",
											"    pm.expect(jsonData.entities[0].email.value).to.not.eql(undefined);",
											"});",
											"",
											"pm.test(\"Email property lowercased\", function () {",
											"    pm.expect(jsonData.entities[0].email.value).to.eql(\"tester@tester.com\");",
											"});",
											"",
											"pm.test(\"Email privacy set\", function () {",
											"    pm.expect(jsonData.entities[0].email.privacy).to.eql(\"private\");",
											"});",
											"",
											"pm.test(\"Password property set\", function () {",
											"    pm.expect(jsonData.entities[0].password).to.not.eql(undefined);",
											"});",
											"",
											"pm.test(\"Password property blanked\", function () {",
											"    pm.expect(jsonData.entities[0].password).to.eql(\"*\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{\n\t\t\"username\": \"Tester\",\n        \"email\": {\n        \t\"value\": \"Tester@Tester.com\",\n        \t\"privacy\": \"private\"\n        },\n        \"password\": \"Tester0\"\n\t}\n]"
								},
								"url": {
									"raw": "localhost:3000/user",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									]
								},
								"description": "Create a user"
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "faab2a9b-2fb4-4026-9d2b-ef4ccee8b3ef",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response has body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Response is JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"Test\",\n  \"email\": \"a@b.c\", \n  \"password\": \"TEST\"\n}"
								},
								"url": {
									"raw": "localhost:3000/user?username=Tester",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "username",
											"value": "Tester"
										}
									]
								},
								"description": "Update a user"
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f1f4baa-2c12-414c-afae-ab2e07f76dfa",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response has body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Response is JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"Test\",\n  \"email\": \"a@b.c\", \n  \"password\": \"TEST\"\n}"
								},
								"url": {
									"raw": "localhost:3000/user?username=Test",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "username",
											"value": "Test"
										}
									]
								},
								"description": "Delete a user"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "36b4ccf2-8d08-4b88-94d4-b883651a1ec1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b1be6024-ccb7-4fb5-a6c9-f529e8e74f13",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d698331c-b681-478e-bfbb-a2f25497b555",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "58c91c37-64db-49d8-bc01-c75250b3194a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "As administrator",
			"description": "",
			"item": [
				{
					"name": "User",
					"description": "",
					"item": [
						{
							"name": "Authenticate - create tests",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"Administrator\", \n  \"password\": \"Administrator0\"\n}"
								},
								"url": {
									"raw": "localhost:3000/user/login",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "List - add more tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c99bd865-7e37-48b4-8e08-ed193d224878",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response has body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Response is JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Error object is undefined\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(undefined);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "localhost:3000/user",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									]
								},
								"description": "Retrieves a list of users"
							},
							"response": []
						},
						{
							"name": "Schema - add more tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2853fc25-9ceb-45c4-847c-5e57771b0c3b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response has body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Response is JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Error object is undefined\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(undefined);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;schema"
									}
								],
								"body": {},
								"url": {
									"raw": "localhost:3000/user",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									]
								},
								"description": "Retrieves the User schema"
							},
							"response": []
						},
						{
							"name": "Find - add tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76593636-dcde-4cde-b092-d676219c50c2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "localhost:3000/user?username=Authenticated",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "username",
											"value": "Authenticated"
										}
									]
								},
								"description": "Retrieves a list of users that satisfy a set of criteria"
							},
							"response": []
						},
						{
							"name": "Create - review tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4366b191-6ef6-4a8a-a90e-c01bd2eb6ae7",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response has body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Response is JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Error object is undefined\", function () {",
											"    pm.expect(jsonData.error).to.eql(undefined);",
											"});",
											"",
											"pm.test(\"Response is an array of 1\", function () {",
											"    pm.expect(jsonData.entities.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Id property set\", function () {",
											"    pm.expect(jsonData.entities[0].id).to.not.eql(undefined);",
											"});",
											"",
											"pm.test(\"Username property set\", function () {",
											"    pm.expect(jsonData.entities[0].username).to.eql(\"Tester\");",
											"});",
											"",
											"pm.test(\"Email property set\", function () {",
											"    pm.expect(jsonData.entities[0].email.value).to.not.eql(undefined);",
											"});",
											"",
											"pm.test(\"Email property lowercased\", function () {",
											"    pm.expect(jsonData.entities[0].email.value).to.eql(\"tester@tester.com\");",
											"});",
											"",
											"pm.test(\"Email privacy set\", function () {",
											"    pm.expect(jsonData.entities[0].email.privacy).to.eql(\"private\");",
											"});",
											"",
											"pm.test(\"Password property set\", function () {",
											"    pm.expect(jsonData.entities[0].password).to.not.eql(undefined);",
											"});",
											"",
											"pm.test(\"Password property blanked\", function () {",
											"    pm.expect(jsonData.entities[0].password).to.eql(\"*\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{\n\t\t\"username\": \"Tester\",\n        \"email\": {\n        \t\"value\": \"Tester@Tester.com\",\n        \t\"privacy\": \"private\"\n        },\n        \"password\": \"Tester0\"\n\t}\n]"
								},
								"url": {
									"raw": "localhost:3000/user",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									]
								},
								"description": "Create a user"
							},
							"response": []
						},
						{
							"name": "Update - add more tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4ffa31a-92f4-4f61-8fe8-b3765a251264",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response has body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Response is JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"Tester\",\n  \"email\": {\n  \t\"value\": \"a@b.c\",\n  \t\"privacy\": \"members\"\n  },\n  \"password\": \"TEST\"\n}"
								},
								"url": {
									"raw": "localhost:3000/user?username=Tester",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "username",
											"value": "Tester"
										}
									]
								},
								"description": "Update a user"
							},
							"response": []
						},
						{
							"name": "Delete - review tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df394a87-e030-45bb-8287-8d0dd0a4b7bd",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Response has body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Response is JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/user?username=Tester",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "username",
											"value": "Tester"
										}
									]
								},
								"description": "Delete a user"
							},
							"response": []
						},
						{
							"name": "Logout - add tests",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {},
								"url": {
									"raw": "localhost:3000/user/logout",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user",
										"logout"
									]
								},
								"description": "Log the user out of the current session."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "As user",
			"description": "",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b13a292c-beaa-47ed-acd2-3d9e241f7676",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c728ef4c-21f7-4962-a7d7-cfd2dd78fbcf",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}