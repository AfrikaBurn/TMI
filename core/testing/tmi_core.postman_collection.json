{
	"info": {
		"_postman_id": "7c933d81-3907-4ba0-aa83-8c8b5aee190e",
		"name": "tmi core",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"description": "Setup tasks required to run test requests.",
			"item": [
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5815bd4f-5177-4e71-bd6a-3749225eb0fb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
									"pm.test(\"Logged out\", pm.globals.get('NO_SESSION_COOKIE'));",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:3000/user/logout",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"logout"
							]
						},
						"description": "Log the user out of the current session."
					},
					"response": []
				},
				{
					"name": "Create System Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "297eea55-72b6-4aac-93de-d0be880619ee",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
									"",
									"const EXPECTED = 3",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is an array of \" + EXPECTED, function () {",
									"    pm.expect(jsonData.entities.length).to.eql(EXPECTED)",
									"});",
									"",
									"for (let i=0; i<EXPECTED; i++){        ",
									"    pm.test(i + \": Id property set\", function () {",
									"        pm.expect(jsonData.entities[i].id).to.not.eql(undefined)",
									"    });",
									"    pm.test(i + \": Username property set\", function () {",
									"        pm.expect(jsonData.entities[i].username).to.not.eql(undefined)",
									"    });",
									"    pm.test(i + \": Email property set\", function () {",
									"        pm.expect(jsonData.entities[i].email.value).to.not.eql(undefined)",
									"    });",
									"    pm.test(i + \": Email property lowercased\", function () {",
									"        pm.expect(jsonData.entities[i].email.value).to.not.eql(undefined)",
									"    });",
									"    pm.test(i + \": Email privacy set\", function () {",
									"        pm.expect(jsonData.entities[i].email.privacy).to.eql(\"owner\")",
									"    });",
									"    pm.test(i + \": Password property set\", function () {",
									"        pm.expect(jsonData.entities[i].password).to.not.eql(undefined)",
									"    });",
									"    pm.test(i + \": Password property blanked\", function () {",
									"        pm.expect(jsonData.entities[i].password).to.eql(\"*\")",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{\n\t\t\"username\": \"Anonymous\",\n        \"email\": {\n        \t\"value\": \"Anonymous@Anonymous.com\",\n        \t\"privacy\": \"owner\"\n        },\n        \"password\": \"Anonymous\"\n\t},\n    {\n        \"username\": \"Administrator\",\n        \"email\": {\n        \t\"value\": \"Administrator@Administrator.com\",\n        \t\"privacy\": \"owner\"\n        },\n        \"password\": \"Administrator\"\n    },\n    {\n        \"username\": \"Authenticated\",\n        \"email\": {\n        \t\"value\": \"Authenticated@Authenticated.com\",\n        \t\"privacy\": \"owner\"\n        },\n        \"password\": \"Authenticated\"\n    }\n]"
						},
						"url": {
							"raw": "localhost:3000/user",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user"
							]
						},
						"description": "Create a user"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b95d2658-82c5-451f-9f21-ffdcb9a2f514",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5edc648f-693b-41dc-94be-444b4e7e6923",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "As anonymous",
			"description": "Requests bu unauthenticated users.",
			"item": [
				{
					"name": "User",
					"description": "Requests to the user service.",
					"item": [
						{
							"name": "Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a8fb299-9ed5-483d-89c2-203155d15d6e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"User schema\", function () {",
											"  pm.expect(jsonData.entities[\"$id\"]).to.eql(\"http://tmi-platform.org/schemas/user.json\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;schema"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/user",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									]
								},
								"description": "Retrieves the User schema"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd172cf8-5495-4514-a78b-1eca755605f2",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Should not be allowed\", () => pm.response.to.have.status(403))"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/user",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									]
								},
								"description": "Retrieves a list of users"
							},
							"response": []
						},
						{
							"name": "Find",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad5bd6f4-759a-42c1-8f33-610acf79770c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Should not be allowed\", () => pm.response.to.have.status(403))"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/user?username=Test",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "username",
											"value": "Test"
										}
									]
								},
								"description": "Retrieves a list of users that satisfy a set of criteria"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42b20085-d591-4f72-832d-a754a719c478",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"pm.test(\"Response is an array\", pm.globals.get('BODY_IS_ARRAY'))",
											"",
											"const EXPECTED = 1",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Response is an array of \" + EXPECTED, function () {",
											"    pm.expect(jsonData.entities.length).to.eql(EXPECTED)",
											"});",
											"",
											"for (let i=0; i<EXPECTED; i++){        ",
											"    pm.test(i + \": Id property set\", function () {",
											"        pm.expect(jsonData.entities[i].id).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Username property set\", function () {",
											"        pm.expect(jsonData.entities[i].username).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Email property set\", function () {",
											"        pm.expect(jsonData.entities[i].email.value).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Email property lowercased\", function () {",
											"        pm.expect(jsonData.entities[i].email.value).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Email privacy set\", function () {",
											"        pm.expect(jsonData.entities[i].email.privacy).to.eql(\"owner\")",
											"    });",
											"    pm.test(i + \": Password property set\", function () {",
											"        pm.expect(jsonData.entities[i].password).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Password property blanked\", function () {",
											"        pm.expect(jsonData.entities[i].password).to.eql(\"*\")",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{\n\t\t\"username\": \"Tester\",\n\t\t\"email\": {\n\t\t\t\"value\": \"Tester@Tester.com\",\n\t\t\t\"privacy\": \"owner\"\n\t\t},\n\t\t\"password\": \"Tester0\"\n\t}\n]"
								},
								"url": {
									"raw": "localhost:3000/user",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									]
								},
								"description": "Create a user"
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ed21a8d-73c1-4fb0-84a4-f37a8fff26c6",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Should not be allowed\", () => pm.response.to.have.status(403))"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"Test\",\n  \"email\": \"a@b.c\", \n  \"password\": \"TEST\"\n}"
								},
								"url": {
									"raw": "localhost:3000/user?username=Tester",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "username",
											"value": "Tester"
										}
									]
								},
								"description": "Update a user"
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "399316cc-e714-4c83-90fc-540b3fb99253",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Should not be allowed\", () => pm.response.to.have.status(403))"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"Test\",\n  \"email\": \"a@b.c\", \n  \"password\": \"TEST\"\n}"
								},
								"url": {
									"raw": "localhost:3000/user?username=Test",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "username",
											"value": "Test"
										}
									]
								},
								"description": "Delete a user"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "36b4ccf2-8d08-4b88-94d4-b883651a1ec1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b1be6024-ccb7-4fb5-a6c9-f529e8e74f13",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Collective",
					"description": null,
					"item": [
						{
							"name": "Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "657432c2-cf51-4a9e-b067-73ee434848b9",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"User schema\", function () {",
											"  pm.expect(jsonData.entities[\"$id\"]).to.eql(\"http://tmi-platform.org/schemas/collective.json\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;schema"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/collective",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"collective"
									]
								},
								"description": "Retrieves the User schema"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d698331c-b681-478e-bfbb-a2f25497b555",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "58c91c37-64db-49d8-bc01-c75250b3194a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "As administrator",
			"description": null,
			"item": [
				{
					"name": "User",
					"description": null,
					"item": [
						{
							"name": "Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a835358c-85d2-4a0e-b816-7718805d3ef8",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"pm.test(\"Logged in\", () => {",
											"        console.log(postman.getResponseCookie('connect.sid').value)",
											"        pm.expect(postman.getResponseCookie('connect.sid')).to.not.eql(undefined)",
											"    }",
											")"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"Administrator\", \n  \"password\": \"Administrator\"\n}"
								},
								"url": {
									"raw": "localhost:3000/user/login",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ecbe515-5c33-411b-867d-1fbfe861ecd5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"User schema\", function () {",
											"  pm.expect(jsonData.entities[\"$id\"]).to.eql(\"http://tmi-platform.org/schemas/user.json\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json;schema"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/user",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									]
								},
								"description": "Retrieves the User schema"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f52b54d-7308-4dd4-bcbf-c08cc8f5eb21",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"",
											"pm.test(\"Response is an array\", pm.globals.get('BODY_IS_ARRAY'))",
											"",
											"const EXPECTED = 4",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Response is an array of \" + EXPECTED, function () {",
											"    pm.expect(jsonData.entities.length).to.eql(EXPECTED)",
											"});",
											"",
											"for (let i=0; i<EXPECTED; i++){        ",
											"    pm.test(i + \": Id property set\", function () {",
											"        pm.expect(jsonData.entities[i].id).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Username property set\", function () {",
											"        pm.expect(jsonData.entities[i].username).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Email property set\", function () {",
											"        pm.expect(jsonData.entities[i].email.value).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Email property lowercased\", function () {",
											"        pm.expect(jsonData.entities[i].email.value).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Email privacy set\", function () {",
											"        pm.expect(jsonData.entities[i].email.privacy).to.eql(\"owner\")",
											"    });",
											"    pm.test(i + \": Password property set\", function () {",
											"        pm.expect(jsonData.entities[i].password).to.not.eql(undefined)",
											"    });",
											"    pm.test(i + \": Password property blanked\", function () {",
											"        pm.expect(jsonData.entities[i].password).to.eql(\"*\")",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/user",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									]
								},
								"description": "Retrieves a list of users"
							},
							"response": []
						},
						{
							"name": "Find",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0feed6e4-6226-46a2-88d5-b02164202f69",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"",
											"pm.test(\"Response is an array\", pm.globals.get('BODY_IS_ARRAY'))",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Response is an array of 1\", function () {",
											"    pm.expect(jsonData.entities.length).to.eql(1)",
											"});",
											"",
											"pm.test(\"Correct username\", function () {",
											"    pm.expect(jsonData.entities[0].username).to.eql('Authenticated')",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/user?username=Authenticated",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "username",
											"value": "Authenticated"
										}
									]
								},
								"description": "Retrieves a list of users that satisfy a set of criteria"
							},
							"response": []
						},
						{
							"name": "Create - review tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0163ecb8-a0af-4dff-95b0-29df78a19605",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Error object is undefined\", function () {",
											"    pm.expect(jsonData.error).to.eql(undefined);",
											"});",
											"",
											"pm.test(\"Response is an array of 1\", function () {",
											"    pm.expect(jsonData.entities.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Id property set\", function () {",
											"    pm.expect(jsonData.entities[0].id).to.not.eql(undefined);",
											"});",
											"",
											"pm.test(\"Username property set\", function () {",
											"    pm.expect(jsonData.entities[0].username).to.eql(\"Tester\");",
											"});",
											"",
											"pm.test(\"Email property set\", function () {",
											"    pm.expect(jsonData.entities[0].email.value).to.not.eql(undefined);",
											"});",
											"",
											"pm.test(\"Email property lowercased\", function () {",
											"    pm.expect(jsonData.entities[0].email.value).to.eql(\"tester@tester.com\");",
											"});",
											"",
											"pm.test(\"Email privacy set\", function () {",
											"    pm.expect(jsonData.entities[0].email.privacy).to.eql(\"owner\");",
											"});",
											"",
											"pm.test(\"Password property set\", function () {",
											"    pm.expect(jsonData.entities[0].password).to.not.eql(undefined);",
											"});",
											"",
											"pm.test(\"Password property blanked\", function () {",
											"    pm.expect(jsonData.entities[0].password).to.eql(\"*\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t{\n\t\t\"username\": \"Tester\",\n        \"email\": {\n        \t\"value\": \"Tester@Tester.com\",\n        \t\"privacy\": \"owner\"\n        },\n        \"password\": \"Tester0\"\n\t}\n]"
								},
								"url": {
									"raw": "localhost:3000/user",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									]
								},
								"description": "Create a user"
							},
							"response": []
						},
						{
							"name": "Update - add more tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19ee65ef-74b1-468a-9b2f-de3bd07c4d9b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"Tester\",\n  \"email\": {\n  \t\"value\": \"a@b.com\",\n  \t\"privacy\": \"member\"\n  },\n  \"password\": \"TEST\"\n}"
								},
								"url": {
									"raw": "localhost:3000/user?username=Tester",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "username",
											"value": "Tester"
										}
									]
								},
								"description": "Update a user"
							},
							"response": []
						},
						{
							"name": "Delete - review tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a077f8f4-0229-458e-b512-3dbcf9c63d4d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/user?username=Tester",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user"
									],
									"query": [
										{
											"key": "username",
											"value": "Tester"
										}
									]
								},
								"description": "Delete a user"
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af896ee3-c59c-407d-a8f6-3d01b6629c07",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
											"",
											"pm.test(\"Logged out\", () => ",
											"    pm.expect(pm.globals.get('SESSION_COOKIE')).to.eql(undefined)",
											")",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "localhost:3000/user/logout",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"user",
										"logout"
									]
								},
								"description": "Log the user out of the current session."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "As user",
			"description": null,
			"item": [
				{
					"name": "Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c86c721-4ca8-435f-b318-29ee2d40a62f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
									"pm.test(\"Logged in\", () => pm.expect(postman.getResponseCookie('connect.sid')).to.not.eql(undefined))"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"Authenticated\", \n  \"password\": \"Authenticated\"\n}"
						},
						"url": {
							"raw": "localhost:3000/user/login",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b86328ea-ca6d-465e-a6ee-bbca7f5d6c5e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"User schema\", function () {",
									"  pm.expect(jsonData.entities[\"$id\"]).to.eql(\"http://tmi-platform.org/schemas/user.json\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json;schema"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:3000/user",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user"
							]
						},
						"description": "Retrieves the User schema"
					},
					"response": []
				},
				{
					"name": "List - review tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe3f3ad8-ee15-4dbf-ae6c-1dd38077b41d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200))",
									"",
									"const EXPECTED = 4",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is an array of \" + EXPECTED, function () {",
									"    pm.expect(jsonData.entities.length).to.eql(EXPECTED)",
									"});",
									"",
									"for (let i=0; i<EXPECTED; i++){        ",
									"    pm.test(i + \": Id property set\", function () {",
									"        pm.expect(jsonData.entities[i].id).to.not.eql(undefined)",
									"    });",
									"    pm.test(i + \": Username property set\", function () {",
									"        pm.expect(jsonData.entities[i].username).to.not.eql(undefined)",
									"    });",
									"    pm.test(i + \": Email property set\", function () {",
									"        pm.expect(jsonData.entities[i].email.value).to.not.eql(undefined)",
									"    });",
									"    pm.test(i + \": Email property lowercased\", function () {",
									"        pm.expect(jsonData.entities[i].email.value).to.not.eql(undefined)",
									"    });",
									"    pm.test(i + \": Email privacy set\", function () {",
									"        pm.expect(jsonData.entities[i].email.privacy).to.eql(\"super\")",
									"    });",
									"    pm.test(i + \": Password property set\", function () {",
									"        pm.expect(jsonData.entities[i].password).to.not.eql(undefined)",
									"    });",
									"    pm.test(i + \": Password property blanked\", function () {",
									"        pm.expect(jsonData.entities[i].password).to.eql(\"*\")",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:3000/user",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user"
							]
						},
						"description": "Retrieves a list of users"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b13a292c-beaa-47ed-acd2-3d9e241f7676",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c728ef4c-21f7-4962-a7d7-cfd2dd78fbcf",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Content-Type is present\", () => pm.response.to.have.header(\"Content-Type\"))",
					"pm.test(\"Response is JSON\", () => pm.response.to.be.json)",
					"pm.test(\"Response has body\", () => pm.response.to.be.withBody)",
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "853574c5-da50-45c4-aa00-c3a065a9b178",
			"key": "NO_ERROR",
			"value": "function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error).to.eql(undefined);\n}",
			"type": "string",
			"description": ""
		},
		{
			"id": "4918f2f8-85cc-4da2-9af5-e792836c1bb4",
			"key": "BODY_IS_ARRAY",
			"value": "function () {\n    pm.expect(jsonData.entities.length).to.not.eql(undefined);\n}",
			"type": "string",
			"description": ""
		},
		{
			"id": "045cbca6-bb08-4513-9aa1-aa35bbe8460c",
			"key": "NO_SESSION_COOKIE",
			"value": "function () {\n postman.getResponseCookie('connect.sid').to.eql(undefined);\n}",
			"type": "string",
			"description": ""
		},
		{
			"id": "60935f23-9be5-4846-95c0-aa0b1efc91a4",
			"key": "USER_ARRAY",
			"value": "function () {\n  pm.test(\"Response is an array of \" + EXPECTED, function () {\n    pm.expect(jsonData.entities.length).to.eql(EXPECTED)\n  });\n  for (let i=0; i<EXPECTED; i++){        \n    pm.test(i + \": Id property set\", function () {\n      pm.expect(jsonData.entities[i].id).to.not.eql(undefined);\n    });\n    pm.test(i + \": Username property set\", function () {\n      pm.expect(jsonData.entities[i].username).to.not.eql(undefined);\n    });\n    pm.test(i + \": Email property set\", function () {\n      pm.expect(jsonData.entities[i].email.value).to.not.eql(undefined);\n    });\n    pm.test(i + \": Email property lowercased\", function () {\n      pm.expect(jsonData.entities[i].email.value).to.eql(\"tester@tester.com\");\n    });\n    pm.test(i + \": Email privacy set\", function () {\n      pm.expect(jsonData.entities[i].email.privacy).to.eql(\"private\");\n    });\n    pm.test(i + \": Password property set\", function () {\n      pm.expect(jsonData.entities[i].password).to.not.eql(undefined);\n    });\n    pm.test(i + \": Password property blanked\", function () {\n      pm.expect(jsonData.entities[i].password).to.eql(\"*\");\n    });\n  }\n}",
			"type": "string",
			"description": ""
		}
	]
}