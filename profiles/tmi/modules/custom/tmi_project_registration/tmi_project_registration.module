<?php

/**
 * @file
 * Project registration custom code.
 */

use \Drupal\Core\Form\FormStateInterface;
use \Drupal\webform\Entity\WebformSubmission;
use \Drupal\webform\WebformSubmissionForm;


/* ------------------------------ Registration process view */


/**
 * Implements hook_node_view().
 */
function tmi_project_registration_node_view_alter(&$build) {
  if ($build['#node']->getType() === 'project_registration' && $build['#view_mode'] === 'full') {

    $user = Drupal::currentUser();
    $roles = $user->getRoles();
    $project_type = strtolower($build['#node']->get('field_project_type')->referencedEntities()[0]->getName());
    $is_wrangler = count(
      array_intersect(
        ['administrator', 'project_wrangler', "{$project_type}_wrangler"],
        $roles
      )
    );
    $pid = \Drupal::request()->query->get('project_id');

    if ($pid){
      _tmi_project_registration_show_form($pid, $build);
    } else {
  
      if ($is_wrangler) {

        $build['registrations'] = views_embed_view('project_registrations', 'per_process', \Drupal::routeMatch()->getParameter('node')->id());
        foreach($build as $key=>$field){
          if (preg_match('/^field_registration/', $key)) {
            $build[$key]['#access'] = FALSE;
          }
        }

      } else {

        if (\Drupal::entityTypeManager()->getStorage('node')->load($pid) == NULL) {
          drupal_set_message('No project could be found to create a registration for. Please contact your wrangler for the correct link.', 'error');
          throw new \Symfony\Component\HttpKernel\Exception\NotFoundHttpException();    
        }

      }      
    }
  }
}


/**
 * Implements template_preprocess__views_view_field__webform_submission_value().
 * Show project name in admin view
 * @return [type]
 */
function tmi_project_registration_preprocess_views_view_field__webform_submission_value(&$variables) {

  $view = $variables['view'];
  $field = $variables['field'];
  $row = $variables['row'];

  if ($view->storage->id() === 'project_registrations' && $field->options['admin_label'] === 'pid'){
    $submission = WebformSubmission::load($row->sid);
    $variables['output'] = $submission->getData()['title'];
  }
}


/* ------------------------------ Registration Form */


/**
 * Shows the registration form
 * @param  [array]  Node build array
 */
function _tmi_project_registration_show_form($pid, &$build) {

  foreach($build as $key=>$element){
    if ($key[0] != '#' && $element['#field_type'] === 'webform') {

      $wid = $element[0]['#webform_id'];
      $matches = [];
      preg_match('/[^_]+$/', $wid, $matches);
      $key = $matches[0];
      $closed = isset($element[0]['#markup']);
      $nid = $build['#node']->id();
      $submission = _tmi_project_registration_load($wid);

      $draft = $submission->isDraft();

      $build["field_registration_{$key}"][0]['elements']['preamble']['submitted'] = [
        '#type' => 'webform_message',
        '#message_type' => ($draft ? 'warning' : 'status'),
        '#message_message' => ($draft
          ? "The {$key} is still incomplete."
          : "The {$key} is complete, but you may still edit it."
        ),
        '#weight' => 10,
        '#parents' => 'preamble',
        '#array_parents' => ['elements', 'preamble'],
      ];
      $build['#attached']['drupalSettings']['tmiProjectRegistration']['state'][$key] = $draft ? 'started' : 'complete';

    }
  }
  $build['#attached']['library'][] = 'tmi_project_registration/formBehaviour';
}


/* ------------------------------ Registration Webforms */


/**
 * Implements hook_webform_submission_form_alter().
 * Hooked to populate the subforms with existing submissions and save drafts.
 */
function tmi_project_registration_webform_submission_form_alter(array &$form, FormStateInterface $form_state, $form_id) {

  $node = \Drupal::routeMatch()->getParameter('node');
  $nid = isset($node) ? $node->id() : FALSE;
  $wid = $form['#webform_id'];
  $pid = \Drupal::request()->query->get('project_id');
  $webform = \Drupal::entityTypeManager()->getStorage('webform')->load($wid);

  if ($webform && $webform->get('category') === 'Project Registration' && $nid && $pid){
    $submission = _tmi_project_registration_load($wid);
    $data = $submission->getData();
    _tmi_project_registration_populate($form['elements'], $data, $submission->id());
    unset($form['actions']['submit']);
    $form['#validate'][] = 'tmi_project_registration_save';
  }
}


/* ------------------------------ Registration Form CRUD */


/**
 * Saves a draft submission.
 */
function tmi_project_registration_save($form, &$form_state){

  $nid = \Drupal::routeMatch()->getParameter('node')->id();
  $wid = $form['#webform_id'];
  $submission = _tmi_project_registration_load($wid);
  $values = $form_state->getValues();

  // Not sure if this matters
  foreach([
    'wizard_next',
    'wizard_prev',
    'submit',
    'form_build_id',
    'form_token',
    'form_id',
    'op',
  ] as $key) {
    unset($values[$key]);
  }

  $pages = array_keys($form_state->getStorage()['pages']);
  $current_index = array_search($form_state->getStorage()['current_page'], $pages);
  $values = $form_state->getValues();
  $page = [
    $values['wizard_next'] => $pages[$current_index + 1],
    $values['wizard_prev'] => $pages[$current_index - 1],
  ][$values['op']];

  $submission->setCurrentPage($page);
  $submission->setData($values);
  if ($page === 'complete') {
    $submission->set('in_draft', 0);
  }
  $submission->save();
}

/**
 * Creates an empty project registration
 * @param  [int]  webform id
 * @param  [int]  node id
 * @param  [int]  project id
 * @return [int]  submission id
 */
function _tmi_project_registration_create($wid, $nid, $pid) {

  $submission_data = [
    'webform_id' => $wid,
    'entity_type' => 'node',
    'entity_id' => $nid,
    'in_draft' => 1,
    'langcode' => 'en',  
    'token' => implode('-', [$wid, $nid, $pid]),
    'uri' => "/webform/{$wid}/api",
    'remote_addr' => '',
    'data' => ['project_id' => $pid],
  ];

  $submission = WebformSubmission::create($submission_data);
  $submission->save();

  return $submission;
}

/**
 * Checks for existing submission and creates one if none found
 * @param  [string] webform id
 * @return [int]    submission id if existing, FALSE if not
 */
function _tmi_project_registration_load($wid){

  $nid = \Drupal::routeMatch()->getParameter('node')->id();
  $pid = \Drupal::request()->query->get('project_id');

  $result = db_query(
    "
    SELECT 
      {webform_submission}.sid
    FROM
      {webform_submission},
      {webform_submission_data}
    WHERE
      {webform_submission}.sid = {webform_submission_data}.sid AND
      {webform_submission_data}.name = 'project_id' AND
      {webform_submission}.webform_id = :wid AND
      {webform_submission}.entity_id = :eid AND
      {webform_submission_data}.value = :pid
    ",
    [
      ':wid' => $wid,
      ':eid' => $nid,
      ':pid' => $pid,
    ]
  )->fetch();
  $sid = $result ? $result->sid : FALSE;

  return $sid ? WebformSubmission::load($sid) : _tmi_project_registration_create($wid, $nid, $pid);
}


/* ------------------------------ Form prepopulation */


/**
 * Populates a submission form.
 * @param  [array] form elements
 * @param  [string] webform id
 * @param  [string] submission id
 */
function _tmi_project_registration_populate(&$elements, $data, $sid){
  foreach($elements as $key=>&$element){

    $value = $data[$key];
    if (isset($data[$key])) {
      switch ($element['#type']){
        case 'entity_autocomplete': _tmi_project_registration_set_autocomplete_entity($element, $value); break;
        default: $elements[$key]['#default_value'] = $value;
      }
      $elements[$key]['#webform_submission'] = $sid;
    }

    if ($key[0] !== '#' && is_array($elements[$key])) {
      _tmi_project_registration_populate($elements[$key], $data, $sid);
    }    

  }
}

/**
 * Populates an autocomplete entity element.
 * @param  [array]  Form element to be populated
 * @param  [string] Value to populate
 */ 
function _tmi_project_registration_set_autocomplete_entity(&$element, $value){
  $entity = entity_load($element['#target_type'], $value);
  if (isset($entity)) {
    $label = array_shift(array_filter([$entity->label, $entity->getUsername()]));
    $element['#default_value'] = "{$label} ({$value})";
  }
}
